{"version":3,"sources":["images/11066361.jpeg","logo.svg","SideBar.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","SideBar","props","state","class","href","id","width","alt","src","avatar","lass","Alert","variant","Component","App","className","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"+FAAAA,EAAOC,QAAU,IAA0B,uC,2ECA3CD,EAAOC,QAAU,IAA0B,kC,gMC4E5BC,E,kDAtEX,WAAYC,GAAO,IAAD,8BACd,cAAMA,IACDC,MAAM,GAFG,E,qDAMd,OACI,yBAAKC,MAAM,sCAEX,uBAAGA,MAAM,+CAA+CC,KAAK,eACzD,uBAAGD,MAAM,oBAGb,yBAAKE,GAAG,aAAaF,MAAM,sBACvB,6BACA,6BACI,yBAAKA,MAAM,iBACP,yBAAKA,MAAM,WAAWG,MAAM,MAAMC,IAAI,SAASC,IAAKC,MACpD,0CAAe,6BAAK,0BAAMC,KAAK,WAAU,uCAAO,4CAAP,SAAmB,sCAAnB,SAA8B,4CAA9B,SAA0C,0CAEvF,8BAGJ,yBAAKP,MAAM,QACP,yBAAKA,MAAM,gBACX,kBAACQ,EAAA,EAAD,CAAOC,QAAQ,QAAf,yJAGI,8BAKR,wBAAIT,MAAM,OACN,wBAAIA,MAAM,YACN,uBAAGC,KAAK,KAAR,aAEJ,wBAAID,MAAM,mBACN,uBAAGC,KAAK,KAAR,UACA,wBAAID,MAAM,OACN,wBAAIA,MAAM,YACN,uBAAGC,KAAK,KAAR,iBAEJ,wBAAID,MAAM,YACN,uBAAGC,KAAK,KAAR,eAEJ,wBAAID,MAAM,YACN,uBAAGC,KAAK,KAAR,WAEJ,wBAAID,MAAM,YACN,uBAAGC,KAAK,KAAR,mBAIZ,wBAAID,MAAM,YACN,uBAAGC,KAAK,KAAR,eAEJ,wBAAID,MAAM,YACN,uBAAGC,KAAK,KAAR,gBAKZ,uBAAGD,MAAM,qBAAqBC,KAAK,gB,GAhEzBS,aCiBPC,MAjBf,WACE,OACE,yBAAKC,UAAU,OACf,yBAAKZ,MAAM,sCACT,kBAAC,EAAD,MACA,yBAAKA,MAAM,sBACT,yBAAKA,MAAM,gBACT,yBAAKA,MAAM,aACT,gDCDQa,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.d738d6fa.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/11066361.035517c5.jpeg\";","module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React, {Component} from 'react';\nimport './SideBar.css';\nimport avatar from './images/11066361.jpeg'; \nimport Alert from 'react-bootstrap/Alert';\n\nclass SideBar extends Component{\n    constructor(props){\n        super(props);\n        this.state={};\n    }\n\n    render(){\n        return(\n            <div class=\"off-canvas off-canvas-sidebar-show\">\n            {/* <!-- off-screen toggle button --> */}\n            <a class=\"off-canvas-toggle btn btn-primary btn-action\" href=\"#sidebar-id\">\n                <i class=\"icon icon-menu\"></i>\n            </a>\n\n            <div id=\"sidebar-id\" class=\"off-canvas-sidebar\">\n                <div>\n                <hr/>\n                    <div class=\"profile-photo\">\n                        <img class=\"s-circle\" width=\"30%\" alt=\"avatar\" src={avatar} />\n                        <h5>Satoko Kora<br/><span lass=\"lang-ja\"><ruby>高<rt>こう</rt>良<rt>ら</rt>智<rt>さと</rt>子<rt>こ</rt></ruby></span></h5>\n                    </div>\n                    <hr/>\n\n                </div>\n                <div class=\"tile\">\n                    <div class=\"tile-content\">\n                    <Alert variant=\"info\">\n                    Full-stack developer, Master's degree in IT in Illinois State University. Currently living in South LA, originally from Japan. Love being creative :)\n  </Alert>\n                        <p></p>\n\n                    </div>\n\n                </div>\n                <ul class=\"nav\">\n                    <li class=\"nav-item\">\n                        <a href=\"#\">Projects</a>\n                    </li>\n                    <li class=\"nav-item active\">\n                        <a href=\"#\">Layout</a>\n                        <ul class=\"nav\">\n                            <li class=\"nav-item\">\n                                <a href=\"#\">Flexbox grid</a>\n                            </li>\n                            <li class=\"nav-item\">\n                                <a href=\"#\">Responsive</a>\n                            </li>\n                            <li class=\"nav-item\">\n                                <a href=\"#\">Navbar</a>\n                            </li>\n                            <li class=\"nav-item\">\n                                <a href=\"#\">Empty states</a>\n                            </li>\n                        </ul>\n                    </li>\n                    <li class=\"nav-item\">\n                        <a href=\"#\">Components</a>\n                    </li>\n                    <li class=\"nav-item\">\n                        <a href=\"#\">Utilities</a>\n                    </li>\n                </ul>\n            </div>\n\n            <a class=\"off-canvas-overlay\" href=\"#close\"></a>\n\n            </div>\n        );\n    }\n}\n\nexport default SideBar;","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport SideBar from \"./SideBar\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n    <div class=\"off-canvas off-canvas-sidebar-show\">\n      <SideBar></SideBar>\n      <div class=\"off-canvas-content\">\n        <div class=\"docs-content\">\n          <div class=\"container\">\n            <h1>H1 Heading</h1>\n          </div>\n        </div>\n      </div>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}